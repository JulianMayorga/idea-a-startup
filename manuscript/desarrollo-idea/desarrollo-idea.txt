#Desarrollo de Idea

##Visión
(Tiene que ser amplia, porque todavía no hay definido nada del modelo de negocios, y si definimos un objetivo muy específico seguramente el mismo va a cambiar)

"Yo creo que los programadores web van a dedicar 25 minutos por dia a [nombre-startup] porque consideran esencial invertir tiempo a su crecimiento profesional"

##Problema

(Hay que empezar por un objetivo más alcanzable que la visión propuesta)


Un subconjunto de la visión "es esencial invertir tiempo al crecimiento profesional de programadores" es "los programadores van a leer código en [nombre-startup]  porque deberian aprender a escribir código de la forma que se aprende a escribir Español: leyendo buenos ejemplos". Un problema asociado a esta subvisión es **Leer código es dificil**.

##Solución

Una solución propuesta al problema planteado es:

App en la que se pueda:

* Seleccionar código y hacer preguntas sobre él
* Subrayar código
* Tomar notas sobre fragmentos de código, visibles para todo el mundo
* Hacer diagramas sobre fragmentos de código
* Conectar fragmentos de código con ejemplos del mismo en jsFiddle o afines
* Buscar uso en el código de palabras clave
* Ver rápidamente documentación de palabras
* Hacer walkthroughs sobre el código para que otros lo vean
* Escribir tests para codigo
* Refactorear fragmentos de código (¿igual a feature jsFiddle?)
* Armar versiones simplificadas del código
* Remover una implementación y reimplementarla hasta que los tests pasen de nuevo

[Aplicar innovators dna a esta idea]

[Elegir un feature a probar]

##Hipótesis

Armado de hipótesis

1. Definir entidades que participan: [Desarrolladores entre 18 y 50 años que quieran aprender código de calidad leyendo]
2. Definir valor dado a cada entidad: [Mejorar como programadores? Aprender sobre librerias open source q usan en el trabajo? Contribuir al entendimiento de códigos libres]
3. Definir MVP final: [Ya descrito en solución]
4. ¿Dónde hay riesgo?: [Al usuario puede no interesarle leer código. Puede preferir leer código en github. Puede preferir leer código de una manera menos estructurada.]

###Hipótesis de valor

**Mejorar entendimiento del código libre que usan**

###Hipótesis de crecimiento

Crecimiento pago: Costo de adquisición por usuario < Valor de vida por usuario. La suma positiva de ingresos crea fondos para publicidad.

###Canvas de hipótesis no testeadas

![Hipótesis no testeadas](images/canvas-daily-tdd.jpg "Canvas")

##Primer paso: Testear Problem Solution Fit

(Es lo mismo que testear hipótesis de valor)

###Landing page

![Learn TDD Landing Page](images/learn-tdd-screenshot.png "Landing page")

* entrevistas
    * En persona
* encuestas
    * Por mail

Preguntas:

* Has practicado TDD antes?
    * Si
        * Donde?
        * Cómo aprendiste?
        * Fue dificil aprender?
    * No
        * Por qué te gustaria aprender?
* Sabes angularjs?
    * Te gustaria aprender?

##Segundo paso: Testear Product Market Fit

Primer MVP

* Plunker embebido en single page app

###Paso siguiente: Pivot o Seguir con otras hipótesis

Hacer pivot si producto no es adecuado
Si validó MVP seguir testeando otra hipótesis:

* Pricing?
* Canal de distribucion? Usar linea de comando en vez de webapp?

##Tercer paso: Testear hipótesis de crecimiento

(una vez que todas las hipótesis de Canvas estan validadas)

Hipótesis de crecimiento:

[Crecimiento pago], a diferencia de sticky o viral

Producto real
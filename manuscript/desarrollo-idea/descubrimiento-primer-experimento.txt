###Primer Experimento

![Primer experimento](images/descubrimiento-3-primer-experimento.jpg)

Finalmente llegó el momento de empezar la validación del modelo de negocios, y convertir todas las suposiciones en certezas. Este proceso generalmente es largo y laborioso, a menos que seas parte de la minoría que saca la lotería de usuarios (Facebook, Instagram, Twitter, etc).

####Hipótesis

¿Por dónde empezar? Tenemos un lienzo de negocio lleno de hipótesis sin validar, sin embargo generalmente el punto de partida será siempre el mismo: hay que tener certeza que la startup encara un problema real de los clientes.

Por lo tanto la primer hipótesis en la que trabajaré va a ser la del Segmento de Clientes:

A> A los programadores web les resulta difícil comprender código.

####Construir

¿Cómo validar esta hipótesis? Llegó la hora de construir un producto que valide la hipótesis planteada. Pero es importante tener en cuenta que se construirá un MVP&mdash;un producto que tenga la funcionalidad mínima y necesaria para probar la hipótesis&mdash;no hay que desperdiciar recursos en productos con funcionalidad innecesaria por ahora.

Generalmente los ingenieros tenemos la tendencia de construir soluciones y que éstas sean perfectas hasta el más mínimo detalle. Esta forma de pensar nos puede llevar a construir soluciones perfectas que nadie usa porque no solucionan ningún problema real.

Sin embargo no todo es programar, es posible que haya etapas de Construcción que no involucren código, por ejemplo:

* podríamos armar un video que plantee el problema a solucionar y después medir su éxito
* podríamos relizar entrevistas con posibles usuarios y detectar si realmente cuentan con el problema planteado en la hipótesis
* podríamos hablar con potenciales clientes y así entender qué necesitan realmente

También está la opción de escribir sólo el código necesario, esto puede ser una simple pero efectiva página web que plantee el problema a validar y mida el éxito de la misma para validar o no la hipótesis. Ése es el MVP que voy a construir en esta etapa: una página de marketing.

#####MVP

Construiré una página que despierte el interés del público objetivo y recolecte emails de interesados. Basta con que la misma plantee que **leer código es difícil**, sin detallar una solución específica al problema. El contenido final de la página será el siguiente:

![Landing page de dip](images/dip-landing-page.png)

La arquitectura de la página es Cliente Servidor. Utilicé un solo lenguaje, javascript, para la construcción de cliente, servidor y base de datos.

* Cliente: desarrollado con el framework AngularJS
* Servidor: API hecha en NodeJS
* Base de datos: MongoDB, ideal para startups por el hecho de no requerir esquemas estáticos

![Arquitectura MVP](images/arquitectura-mvp.jpg)

A pesar de la simpleza de la solución planteada, tiene un objetivo importante&mdash;recolectar emails de interesados&mdash; y hay que asegurar que haga esto perfectamente. Para esto armaré un conjunto de pruebas funcionales y unitarias que verifiquen que página hace lo que tiene que hacer.

#####Pruebas automatizadas

Probaré la funcionalidad de la aplicación con dos tipos de pruebas, pruebas de integración (end-to-end o E2E en inglés) y pruebas unitarias. Las pruebas E2E verifican que la aplicación funciona desde el punto de vista del usuario, y las pruebas unitarias verifican que cada unidad (clase, función, etc) funciona.

######Pruebas E2E

La página cuenta con un elemento en el que el usuario ingresa su email y un botón que lo envía. Hay que verificar que la página muestra una confirmación al usuario cuando ingrese su email correctamente.

Para probar esto utilizaré Selenium como herramienta de automatización, la cual puede realizar las mismas acciones que una persona a la hora de navegar sitios web. A continuación muestro cómo ingresar un email y apretar el botón "Vamos" a través de Selenium.

```javascript
describe('Pagina', function() {
  it('deberia mostrar confirmacion al recibir un email', function() {
    browser.get('/#/');

    var entradaEmail = element(by.id('email'));
    var botonVamos = element(by.id('vamos'));
    var confirmacion = element(by.id('confirmacion'));

    entradaEmail.sendKeys('nombre@example.com');
    botonVamos.click();
    expect(confirmacion.isDisplayed()).toBe(true);
    expect(entradaEmail.isDisplayed()).toBe(false);
    expect(botonVamos.isDisplayed()).toBe(false);
  });
});

```

Con esta prueba queda verificada la funcionalidad desde el punto de vista del usuario, pero ¿cómo verificar que al apretar el botón "Vamos" se envía un pedido HTTP al servidor? Para eso están las pruebas unitarias.

######Pruebas unitarias

Un controlador bien diseñado tiene como responsabilidad ser el "pegamento" entre la vista y los modelos, es un mero intermediario. Por lo tanto una prueba unitaria de controlador debe verificar que el mismo llama de manera correcta a los modelos, y esto se puede verificar tranquilamente utilizando "mocks"&mdash;objetos temporales que tienen la funcionalidad de objetos reales&mdash;no hay necesidad de usar a los objetos reales porque queremos verificar el comportamiento de una unidad a la vez.

La prueba unitaria del controlador es la siguiente:

```javascript
describe('Controller: MainCtrl', function () {
  var MainCtrl,
  scope,
  ServicioEmailMock;

  beforeEach(module('launchApp', function ($provide) {
    ServicioEmailMock = jasmine.createSpyObj('ServicioEmail', ['enviar']);
    $provide.value('ServicioEmail', ServicioEmailMock);
  }));

  beforeEach(inject(function ($controller, $rootScope) {
    scope = $rootScope.$new();
    MainCtrl = $controller('MainCtrl', {
      $scope: scope
    });
  }));

  it('deberia enviar email usando ServicioEmail', function () {
    scope.email = 'nombre@example.com';
    scope.enviarEmail(scope.email);
    expect(ServicioEmailMock.enviar).toHaveBeenCalledWith(scope.email);
  });
});
```
Para probar que el modelo de la aplicación&mdash;el servicio email&mdash;funciona voy a utilizar una nueva especie de objeto temporal, un backend falso. El mismo evita que se hagan pedidos HTTP innecesarios, los cuales pueden ralentizar innecesariamente nuestras pruebas.

La forma de utilizar este backend falso para probar que el servicio email funciona correctamente es la siguiente:

```javascript
describe('Service: ServicioEmail', function () {
  var ServicioEmail,
  httpBackend,
  API_URL = 'http://dip-api.herokuapp.com';

  beforeEach(module('launchApp'));

  beforeEach(inject(function (_ServicioEmail_, $injector) {
    ServicioEmail = _ServicioEmail_;
    httpBackend = $injector.get('$httpBackend');
  }));

  afterEach(function() {
    httpBackend.verifyNoOutstandingExpectation();
    httpBackend.verifyNoOutstandingRequest();
  });

  it('deberia guardar email en el servidor', function () {
    var email = 'nombre@example.com';
    httpBackend.expectPOST(API_URL + '/email', {'email': email}).respond(201, '');
    ServicioEmail.enviar(email);
    expect(ServicioEmail.estado).toBe(null);
    httpBackend.flush();
    expect(ServicioEmail.estado).toBe('exito');
  });

  it('deberia indicar si hubo un error', function () {
    var email = 'nombre@example.com';
    httpBackend.expectPOST(API_URL + '/email', { 'email': email}).respond(404, '');
    ServicioEmail.enviar(email);
    expect(ServicioEmail.estado).toBe(null);
    httpBackend.flush();
    expect(ServicioEmail.estado).toBe('error');
  });
});

```

El resto del código del frontend está hosteado en GitHub en la siguiente dirección:

[Frontend en github](https://github.com/JulianMayorga/dip-primer-mvp-frontend)

#####Servidor

El servidor está hosteado en un dominio diferente al cliente por motivos de modularidad. Al hacer esto hay un desacoplamiento entre cliente y servidor, y una interfaz REST definida para la comunicación entre ambos.

La API REST cuenta con sólo dos funciones:

1. responder a los pedidos realizados a "/email" con un código de confirmación
2. guardar en la base de datos el correo que viene en el cuerpo del pedido.

A continuación mostraré cómo probar estos dos requisitos:

```javascript
var app = require('../../index.js'),
request = require('supertest'),
expect = require('chai').expect,
mongodb = require('mongoskin');

var MONGODB_URL = process.env.MONGODB_URL ||
 'mongodb://localhost:27017/dip-testdb';

describe('POST /email', function () {

  var db = mongodb.db(MONGODB_URL, {safe: true});

  after(function (done) {
    db.collection('users').drop(done);
  });

  it('deberia responder con codigo 200', function (done) {
    request(app)
    .post('/email')
    .send({email: 'nombre@example.com'})
    .expect(200, done);
  });

  it('deberia guardar email en la base de datos', function (done) {
    var testEmail = 'miguel@example.com';

    request(app)
    .post('/email')
    .send({email: testEmail})
    .end(function (err, res) {
      db.collection('users').findById(res.body._id, function (err, res) {
        expect(res.email)
        .to.equal(testEmail);
        done();
      });
    });
  });

});
```

La API completa, al igual que el cliente, se encuentra hosteada en github. La dirección de la misma es la siguiente:

[API en github](https://github.com/JulianMayorga/dip-primer-mvp-api)

####Medir

Una vez que se libera el MVP al mundo hay que analizar los resultados del experimento. Puede ser tentador medir cantidad de visitas al mes, tiempo total en la aplicación, tiempos de respuesta, etc. Trackear estás métricas es divertido, pero no es el objetivo del experimento, lo único que interesa son la cantidad de personas que mostraron interés en la solución al dar sus emails.

En esta etapa hay que plantearse la pregunta ¿cuántos emails consideramos un éxito? ¿10 emails? ¿50? ¿1000? Estos números, obviamente, dependen de muchos factores pero es importante definir un número. Éste número va a ser la vara que tildará de éxito o fracaso al experimento.

####Aprender

En esta etapa hay que analizar los datos que surgieron del experimento y tomar una decisión con respecto a la próxima hipótesis a medir. ¿Es necesario realizar otro experimento para validar la hipótesis planteada? ¿O hay suficientes pruebas para decir que contamos con un problema real, y estamos listos para validar la solución?

####Paso siguiente

Para ejemplificar el proceso de Desarrollo de Clientes, vamos a suponer que la página de marketing fué todo un éxito. Ahora que sabemos que hay programadores interesados en la lectura de código vamos a armar una solución real: **Un editor de HTML, CSS y JavaScript con enfoque en generar código "legible".**